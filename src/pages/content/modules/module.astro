---
import '$styles/article.scss'
import BaseLayout from '$layouts/Base.astro'
---

<style is:global>
main {
  min-height: 80svh;
}

img {
  max-width: 100%;
  height: auto;
}

article figure img,
article p img {
  border-radius: 0.25rem;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.7);
}
</style>

<BaseLayout
  auth={true}
  admin={false}
  title="Module"
  description="Module Details">
  <div class="d-flex justify-content-between mb-4">
    <a class="text-decoration-none text-primary" href="/content/modules/">
      <span class="display-6">&larr;</span>
    </a>

    <h1 id="post-title"></h1>

    <div>
      <p><span id="post-visits"></span> || <span id="post-likes"></span></p>
    </div>
  </div>

  <div class="text-center mb-3">
    <img
      class="rounded shadow"
      loading="lazy"
      width="960"
      height="540"
      id="post-hero"
      alt="Post Hero"
      src="" />
  </div>

  <article id="article"></article>

  <div
    class="d-none justify-content-around"
    id="pagination">
    <button
      id="prev"
      class="btn btn-primary">
      Prev
    </button>

    <button
      id="next"
      class="btn btn-primary">
      Next
    </button>
  </div>
</BaseLayout>

<script>
  import type { RecordId } from 'surrealdb'
  import type { Module } from '$lib/types'
  import { authService } from '$lib/auth'

  const postSlug = new URLSearchParams(globalThis.location.search).get('slug')
  const pagination = document.getElementById('pagination')
  const prev = document.getElementById('prev')
  const next = document.getElementById('next')

  if (!postSlug) {
    globalThis.location.href = '/content/modules/'
  }

  authService.isReady.then(async () => {
    const db = authService.getDb()
    const rest: Module[][] = await db.query('SELECT * FROM module WHERE slug IS $slug;', {
      slug: postSlug,
    })

    const post = rest[0][0]

    const pages = rest[0][0].content
    let currentPage = 0

    if (!post) {
      globalThis.location.href = '/content/modules/'
    } else {
      const article = document.getElementById('article')
      const visits = document.getElementById('post-visits')
      const likes = document.getElementById('post-likes')
      const img: HTMLElement = document.getElementById('post-hero')
      const h1 = document.getElementById('post-title')

      visits.innerText = `Visits: ${post.visits || 0}`
      likes.innerText = `Likes: ${post.likes || 0}`

      h1.innerText = post.title
      img.src = post.hero

      article.innerHTML = pages[currentPage]
    }

    if (pages.length > 1 && (prev && next)) {
      pagination.classList.remove('d-none')
      pagination.classList.add('d-flex')

      prev.addEventListener('click', () => {
        if (currentPage > 0) {
          currentPage--
          article.innerHTML = pages[currentPage]
        }
      })

      next.addEventListener('click', () => {
        if (currentPage < pages.length - 1) {
          currentPage++
          article.innerHTML = pages[currentPage]
        }
      })
    }
  })

  // send like
  document
    .getElementById('post-likes')!
    .addEventListener('click', async () => {
      const db = authService.getDb()
      const user = authService.getUser() || authService.getRandUser()

      try {
        await db.query(
          `
            $user_id = type::record($user);
            RELATE $user_id->likes->(SELECT id FROM ONLY module WHERE slug IS $slug LIMIT 1);
          `,
          { user: user.id, slug: postSlug }, // TODO: getUser() should return anonymous user
        )
      } catch (error: unknown) {
        if (error!.toString().includes('likes_unique')) {
          alert('You have already liked this post')
        } else {
          console.log(error)
        }
      }

      const likes = document.getElementById('post-likes')!
      likes.innerText = `Likes: ${parseInt(likes.innerText.split(' ')[1]) + 1}`
    })
</script>
